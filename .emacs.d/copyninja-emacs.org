#+TITLE: Emacs Configuration
#+AUTHOR: Vasudev Kamath
#+EMAIL: kamathvasudev@gmail.com
#+OPTIONS: toc:3 num:nil ^:nil
# table of contents down to level 2
# no section numbers
# don't use Tex syntax for sub and subscripts
# See http://orgmode.org/manual/Export-options.html
# Time-Stamp: <<2013-05-07 Tue>

* Emacs Configuration in Org-Mode
  Inspired by Deepak Tripathi, literate programming using org-mode,
  idea is to have one .emacs that can be bootstrapped anywhere using
  package.el
  #+BEGIN_EXAMPLE emacs-lisp
   ;; works only in Emacs24 and above
   (org-babel-load-file
    (expand-file-name "copyninja-emacs.org"
                      user-emacs-directory))
  #+END_EXAMPLE
* Load from Elpa
  #+BEGIN_SRC emacs-lisp
   ;; Initialize elpa folder stuff
   (package-initialize)
  #+END_SRC
* Emacs custom set variables
  #+BEGIN_SRC emacs-lisp
    (custom-set-variables
     ;; custom-set-variables was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     '(debian-bug-from-address "Vasudev Kamath <kamathvasudev@gmail.com>")
     '(debian-bug-download-directory "~/.emacs.d/debbugs/")
     '(debian-bug-helper-program (quote reporbug))
     '(user-full-name "Vasudev Kamath")
     '(user-mail-address "vasudev@copyninja.info")
     '(custom-safe-themes t)
     )

    ;; Enable line and column numbering
    (column-number-mode t)
    (global-linum-mode t)

    ;; Don't need toolbar
    (setq tool-bar-mode nil)

    ;; Don't show scrollbars
    (set-scroll-bar-mode nil)

    ;; don't show startup message
    (setq inhibit-startup-message t)

    ;; Don't want yes or no lets settle for y or n
    (fset 'yes-or-no-p 'y-or-n-p)

    ;; Paranthesis matching
    (show-paren-mode t)

    ;; mouse wheel enabling
    (mouse-wheel-mode t)

    ;; show date and time
    (setq display-time-day-and-date nil)
  #+END_SRC
* Custom Functions
  #+BEGIN_SRC emacs-lisp
    ;; -------------------------------------------------------------------
    ;; Custom functions
    ;; -------------------------------------------------------------------
    ;; From http://www.emacsblog.org/2007/01/17/indent-whole-buffer/
    ;; function to indent whole buffer
    ;; To use you need to type M-x iwb
    (defun iwb ()
      "indent whole buffer"
      (interactive)
      (delete-trailing-whitespace)
      (indent-region (point-min) (point-max) nil)
      (untabify (point-min) (point-max)))

    ;; Switch or create scratch buffer any time
    (defun openScratch()
      (interactive)
      (switch-to-buffer "*scratch*"))

    ;; To work in full screen mode
    (defun fullscreen ()
      (interactive)
      (set-frame-parameter nil 'fullscreen
                           (if (frame-parameter nil 'fullscreen) nil 'fullboth)))
    ;; Open my todo file
    (defun openTODO (todofile)
      (interactive "FTodo File: ")
      (find-file todofile))

    ;; Custom function to overwrite C-x <left> and C-x <right>
    (defun rebind-smartparen-keys()
      (global-unset-key (kbd "C-<left>"))
      (global-unset-key (kbd "C-<right>"))
      (global-set-key (kbd "C-<right>") 'sp-forward-slurp-sexp)
      (global-set-key (kbd "C-<left>") 'sp-backward-barf-sexp))

    ;; function to trim strings copied from
    ;; http://ergoemacs.org/emacs/modernization_elisp_lib_problem.html
    (defun s-trim-left (s)
      "Remove whitespace at the beginning of S."
      (if (string-match "\\`[ \t\n\r]+" s)
          (replace-match "" t t s)
        s))

    (defun s-trim-right (s)
      "Remove whitespace at the end of S."
      (if (string-match "[ \t\n\r]+\\'" s)
          (replace-match "" t t s)
        s))

    (defun s-trim (s)
      "Remove whitespace at the beginning and end of S."
      (s-trim-left (s-trim-right s)))

    ;; path manipulation
    ;; copied from  http://blog.liangzan.net/blog/2012/12/12/customizing-your-emacs-eshell-prompt/
    (defun pwd-repl-home (pwd)
      (interactive)
      (let* ((home (expand-file-name (getenv "HOME")))
       (home-len (length home)))
        (if (and
       (>= (length pwd) home-len)
       (equal home (substring pwd 0 home-len)))
      (concat "~" (substring pwd home-len))
          pwd)))

    ;; insert multi-arch value into control files
    (defun insert-multi-arch (value)
      "Inserts Multi-Arch: value tag in proper place  in Debian control
       file. Function executes only when buffer name is control and mode is
       debian-control-mode "
      (interactive "sMulti-Arch: ")
      (if (and (string= major-mode "debian-control-mode")
               (compare-strings "control" 1 7
                                (buffer-name) 1 7))
          (progn
            (point-min)
            (while (re-search-forward "Architecture: \\(.+\\)" nil t)
              (insert (format "\nMulti-Arch: %s" value))))
        (message "Sorry this function works only in debian control file")))
  #+END_SRC
* Keyboard Shortcuts
  #+BEGIN_SRC emacs-lisp
     ;; -------------------------------------------------------------------
     ;; Keyboard Shortcuts
     ;; -------------------------------------------------------------------

     ;; Get buffer menu with right mouse button
     (global-set-key (kbd "<mouse=3>") 'mouse-buffer-menu)

     ;; Navigation between windows
     (global-set-key (kbd "C-x <down>")  'windmove-down)
     (global-set-key (kbd "C-x <up>")    'windmove-up)
     (global-set-key (kbd "C-x <left>")  'windmove-left)
     (global-set-key (kbd "C-x <right>") 'windmove-right)

     ;; undo like windows
     (global-set-key (kbd "C-z") 'undo)

     ;; text-wrapping using auto-fill-mode
     (global-set-key (kbd "C-c q") 'auto-fill-mode)

     ;; Buffer navigation
     (global-set-key (kbd "<C-tab>") 'bury-buffer)
     (global-set-key (kbd "<C-S-iso-lefttab>") 'previous-buffer)

     ;; Yank menu with clipboard history
     (global-set-key "\C-cy" '(lambda ()
                                     (interactive)
                                      (popup-menu 'yank-menu)))

     ;; org-export on [f5]
     (global-set-key [f5] 'org-export-as-html)

     ;; Misc short cuts
     (global-set-key (kbd "s-<f1>") 'openTODO)
     (global-set-key (kbd "s-~") 'start-erc)
     (global-set-key [f11] 'fullscreen)
     (global-set-key (kbd "s-s") 'openScratch)
  #+END_SRC
* Programing Related
  #+BEGIN_SRC emacs-lisp
    ;; --------------------------------------------------
    ;; Programming mode customization and hooks
    ;; --------------------------------------------------

    ;; cperl-mode is preferred to perl-mode
    ;; "Brevity is the soul of wit" <foo at acm.org>
    (defalias 'perl-mode 'cperl-mode)

    ;; Enable elpy
    (elpy-enable)

    ;; Eldoc mode enable
    (eldoc-mode t)

    ;; smartparens enable and disable autopair
    (smartparens-global-mode t)

    ;; Add hook for go-mode to enable eldoc for go
    (add-hook 'go-mode-hook 'go-eldoc-setup)


    ;; turtle file mode for rdf
    (autoload 'ttl-mode "ttl-mode" "Major mode for OWL or Turtle file" t)
    (add-hook 'ttl-mode-hook
              'turn-on-font-lock)

    ;; -------------------------------------------------------------------
    ;; different modes hook based on file extension
    ;; -------------------------------------------------------------------
    (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
    (add-to-list 'auto-mode-alist '("\\.inc$" . php-mode))
    (setq auto-mode-alist
        (append '(
            ("\\.pl$"           .       perl-mode)
            ("\\.cgi$"          .       perl-mode)
            ("\\.pm$"           .       perl-mode)
            ("\\.emacs$"        .       emacs-lisp-mode)
            ("\\.sh$"           .       shell-script-mode)
            ("\\.html$"         .       html-mode)
            ("\\.tmpl$"         .       html-mode)
            ("/mutt"            .       message-mode)
            ("/alot\\..*"       .       message-mode)
            ("\\.md$"           .       markdown-mode)
            ("\\.js$"           .       js2-mode)
            ("\\.n3"            .       ttl-mode)
            ("\\.ttl"           .       ttl-mode)
        )
        auto-mode-alist))

    ;; Hook rainbow-mode to css and html
    (add-hook 'css-mode-hook  'rainbow-mode)
    (add-hook 'html-mode-hook 'rainbow-mode)

    ;; Hooks for lisp-mode emacs-lisp-mode for smartparens
    (add-hook 'emacs-lisp-mode-hook 'rebind-smartparen-keys)
    (add-hook 'lisp-mode-hook 'rebind-smartparen-keys)
    ;; --------------------------------------------------
    ;; Enable yasnippet
    ;; --------------------------------------------------
    (require 'yasnippet)
    (yas-global-mode 1)
    (yas--initialize)
    (yas-minor-mode 1)

    ;;Enable yas dropdown
    (require 'dropdown-list)
    (setq yas-prompt-functions '(yas-dropdown-prompt
                                 yas-ido-prompt
                                 yas-completing-prompt))
    (add-hook 'prog-mode-hook
            '(lambda ()
               (yas-minor-mode)))

    ;; ---------------------------------------------------
    ;; Auto complete
    ;; ---------------------------------------------------
    (require 'auto-complete)
    (global-auto-complete-mode t)
    (setq ac-auto-start 3)

    ;; Auto complete dictionary configuration
    (when (require 'auto-complete-config nil 'noerror))
    (setq ac-comphist-file "~/.emacs.d/ac-comphist.dat")
    (ac-config-default)

    ;; Enable coloring paranthesis pair
    (rainbow-delimiters-mode)

    ;; fontlock and decoration
    (setq font-lock-maximum-decoration t)
    (global-font-lock-mode t)

    ;; Use hy from virtualenv
    (setq hy-mode-inferior-lisp-command
          "/home/vasudev/.virtualenvs/hy3env/bin/hy --spy")

    ;; SLIME setup for SBCL
    (setq inferior-lisp-program "sbcl")
    (require 'slime)
    (slime-setup)

    ;; Haskell mode setup
    (require 'haskell-mode)
    (setenv "PATH" (concat "~/.cabal/bin:" (getenv "PATH")))
    (add-to-list exec-path "~/.cabal/bin")

    ;; ghc-mod
    (autoload 'ghc-init "ghc" nil t)
    (autoload 'ghc-debug "ghc" nil t)

    (eval-after-load "haskell-mode"
      '(progn
         (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
         (add-hook 'haskell-mode-hook 'turn-on-haskell-doc)
         (add-hook 'haskell-mode-hook 'turn-on-eldoc-mode)
         (add-hook 'haskell-mode-hook (lambda() (ghc-init)))
         (define-key haskell-mode-map (kbd "C-,") 'haskell-move-nested-left)
         (define-key haskell-mode-map (kbd "C-.") 'haskell-move-nested-right)))

  #+END_SRC
* UI and Text editing related customizations
  #+BEGIN_SRC emacs-lisp
    ;; --------------------------------------------------
    ;; UI and Text editing related
    ;; --------------------------------------------------

    ;; Load a theme
    (load-theme 'ample-zen)

    ;; Display time and date
    (display-time)

    ;; Battery info
    (display-battery-mode t)

    ;; Hightlight lines more than 80 chars
    (add-hook 'text-mode-hook 'highlight-80+-mode)
    (add-hook 'prog-mode-hook 'highlight-80+-mode)
    (add-hook 'debian-changelog-mode-hook 'highlight-80+-mode)

    ;;--------------------------------------------
    ;; Some prettiness in prog langs & modelines
    ;; (copied from theanalyst)
    ;;--------------------------------------------

    (defvar mode-line-cleaner-alist
      `((auto-complete-mode . " ac")
        (lisp-interaction-mode . " li")
        (smartparens-mode " SP")
        (paredit-mode " {}")
        (yas-minor-mode " Y")
        (magit-diff-mode " mdiff")
        ;; Major Modes
        (python-mode . "Py")
        (emacs-lisp-mode . "elisp")
        (nxml-mode . "xml")
        )
      "Alist for `clean-mode-line'.

    When you add a new element to the alist, keep in mind that you
    must pass the correct minor/major mode symbol and a string you
    want to use in the modeline *in lieu of* the original."
      )

    (defun clean-mode-line ()
      (interactive)
      (loop for cleaner in mode-line-cleaner-alist
            do (let* ((mode (car cleaner))
                      (mode-str (cdr cleaner))
                      (old-mode-str (cdr (assq mode minor-mode-alist))))
                 (when old-mode-str
                   (setcar old-mode-str mode-str))
                 ;; major mode
                 (when (eq mode major-mode)
                   (setq mode-name mode-str)))))

    ;; Hook to clean up the mode lines
    (add-hook 'after-change-major-mode-hook 'clean-mode-line)

    ;; power line hack
    (setq powerline-arrow-shape 'arrow14)
    (setq powerline-color1 "grey22")
    (setq powerline-color2 "grey40")
    (powerline-default-theme)

    ;; dictionary configuration
    (setq ispell-program-name "hunspell")
    (require 'rw-language-and-country-codes)
    (require 'rw-ispell)
    (require 'rw-hunspell)
    (setq ispell-dictionary "en_US")
    (custom-set-variables
     '(rw-hunspell-default-dictionary "da_DK_hunspell")
     '(rw-hunspell-dicpath-list (quote ("/usr/share/hunspell")))
     '(rw-hunspell-make-dictionary-menu t)
     '(rw-hunspell-use-rw-ispell t)
     )

    ;; flyspell for on the fly spell checking
    (dolist (hook '(text-mode-hook))
      (add-hook hook (lambda() (flyspell-mode t))))
    (dolist (hook '(change-log-mode-hook log-edit-mode-hook))
      (add-hook hook (lambda() (flyspell-mode t))))

    ;; Set the fonts
    (custom-set-faces
     ;; custom-set-faces was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     '(default ((t (:family "FreeMono" :foundry "unknown" :slant italic
                            :weight bold :height 113 :width normal)))))
  #+END_SRC
* Eshell Configuration
  #+BEGIN_SRC emacs-lisp
    ;; Need eshell first
    (require 'eshell)

    ;; Environment variable
    (setenv "EDITOR" "emacsclient")
    (setenv "LC_ALL" "C")
    (setenv "LANG" "en_US.UTF8")

    ;; eshell variable
    (setq eshell-history-size 20000)
    (setq eshell-save-history-on-exit t)
    (setq eshell-hist-ignoredups t)
    (setq eshell-prompt-regexp "^[^#$]*[#$] ")

    ;; some custom variable
    (setq username (getenv "USER"))
    (setq hostname (s-trim (shell-command-to-string "echo $HOST")))

    ;; Disable cycle completion on tabs for speed ups otherwise tabbing
    ;; takes forever generating completions
    (setq eshell-cmpl-cycle-completions nil)
    (setq pcomplete-cycle-completions nil)

    ;; scroll to bottom on output
    (setq eshell-scroll-to-bottom-on-output t)
    (setq eshell-scroll-show-maximum-output t)

    ;; Ignore .git .svn CVS directories on completions
    (setq  eshell-cmpl-dir-ignore  "\\`\\(\\.\\.?\\|CVS\\|\\.svn\\|\\.git\\)/\\'")

    (eval-after-load 'esh-opt
      '(progn
         (load "em-cmpl")
         (load "em-prompt")
         (load "em-term")
         (load "em-hist")
         (load "em-unix")
         (setenv "PAGER" "cat")
         (add-hook 'eshell-mode-hook
                   '(lambda() (define-key eshell-mode-map "\C-a" 'eshell-bol)))
         (add-to-list 'eshell-visual-commands "ssh")
         (add-to-list 'eshell-visual-commands "tail")
         (add-to-list 'eshell-visual-commands "top")
         (add-to-list 'eshell-command-completions-alist
                      '("gunzip" "gz\\'"))
         (add-to-list 'eshell-command-completions-alist
                      '("tar" "\\(\\.tar|\\.tgz\\||\\.tar\\.gz\\)\\'"))
         (add-to-list 'eshell-output-filter-functions 'eshell-handle-ansi-color)))

    ;;from http://www.khngai.com/emacs/eshell.php
    (defun eshell/clear ()
      "04Dec2001 - sailor, to clear the eshell buffer."
      (interactive)
      (let ((inhibit-read-only t))
        (erase-buffer)))

    ;; Set the prompt function
    (setq eshell-prompt-function
          (lambda () (concat
                      "[" username "@" hostname ": "
                      (if (string= (pwd-repl-home (eshell/pwd)) (getenv "HOME"))
                          "~" (pwd-repl-home (eshell/pwd))) "]"
                          (if (= (user-uid) 0) " # " " $ "))))

    ;; This will transform ansi color to faces in emacs shell
    (ansi-color-for-comint-mode-on)
    (defun eshell-handle-ansi-color()
      (ansi-color-apply-on-region eshell-last-output-start
                                  eshell-last-output-end))

    ;;Here's how to compile in the background, also by Kai.
    (defun eshell/ec (&rest args)
      "Use `compile' to do background makes."
      (if (eshell-interactive-output-p)
          (let ((compilation-process-setup-function
                 (list 'lambda nil
                       (list 'setq 'process-environment
                             (list 'quote (eshell-copy-environment))))))
            (compile (eshell-flatten-and-stringify args))
            (pop-to-buffer compilation-last-buffer))
        (throw 'eshell-replace-command
               (let ((l (eshell-stringify-list (eshell-flatten-list args))))
                 (eshell-parse-command (car l) (cdr l))))))
    (put 'eshell/ec 'eshell-no-numeric-conversions t)
  #+END_SRC
* Emms configuration
  #+BEGIN_SRC emacs-lisp
    ;; Emms music setup
    (require 'emms-setup)

    ;; Lets enable all emms stable features along with emms-standard
    (emms-all)

    ;; Assign the players
    (emms-default-players)

    ;; Set the default music directory for and default playlist mode
    (setq emms-source-file-default-directory "~/Music/")
    (setq emms-playlist-default-major-mode 'emms-playlist-mode)

    ;; Keybindings for volume
    (global-set-key (kbd "C-c +") 'emms-volume-mode-plus)
    (global-set-key (kbd "C-c -") 'emms-volume-mode-minus)

    ;; display emms remaining time
    (require 'emms-playing-time)
    (emms-playing-time 1)
  #+END_SRC
* SMTP Configuration
  #+BEGIN_SRC emacs-lisp
    (require 'smtpmail-multi)

    (setq smtpmail-multi-accounts
          '((copyninja-mail "vasudev" "smtp.copyninja.info" 25
             header nil nil nil "rudra.copyninja.info")
            (copyninja-mail "vasudev-debian" "smtp.copyninja.info" 25
             header nil nil nil "rudra.copyninja.info")
            (kamathvasudev-gmail nil "localhost" 25 header nil nil nil
                                 "rudra.copyninja.info")))
    (setq smtpmail-multi-associations
          '((("From" . "kamathvasudev@gmail.com")
             gmail-primary)
            (("From" . "vasudev@copyninja.info")
             copyninja-mail))) 

    ;; Send the entire buffer using mail
    (setq send-mail-function 'smtpmail-multi-send-it)

    ;; this for GNUS
    (setq message-send-mail-function 'smtpmail-multi-send-it)

    ;; mail credentials
    (setq smtpmail-auth-credentials "~/.authinfo.gpg")
  #+END_SRC
* Org customization
  #+BEGIN_SRC emacs-lisp
    (setq org-default-notes-file (concat (expand-file-name "~/.emacs.d/")
                                         "todo/gtd.org"))
    (define-key global-map "\C-cc" 'org-capture)

    ;; customize capture templates
    (setq org-capture-templates
           '(("t" "Todo" entry (file+headline "~/.emacs.d/todo/gtd.org" "Tasks")
             "* TODO %?\n  %i\n  %a")
            ("j" "Journal" entry (file+datetree "~/.emacs.d/todo/journal.org")
             "* %?\nEntered on %U\n  %i\n  %a")))
    (define-key global-map "\C-cx"
      (lambda () (interactive) (org-capture nil "x")))

    (setq org-reveal-root
          "file:///home/vasudev/Documents/javascripts/upstream/reveal.js")
  #+END_SRC
* Windows OS configurations
  #+BEGIN_SRC emacs-lisp
    (defun set-plink-path()
      "Appends the path to plink.exe and pscp.exe to path modify accordingly"
      (setq exec-path
            (append exec-path '("c:/Users/invakam2/Documents/plink"
                                "c:/Python27"
                                "c:/Python27/scripts"))))

    (defun configure-tramp-on-windows()
      "Configures tramp to use pscp instead of SSH"
      (require 'tramp)
      (require 'tramp-sh)
      (setq tramp-default-method "pscp")
      (eval-after-load 'tramp '
        (progn
          (setenv "SHELL" "/bin/bash")
          (setenv "TERM" "dumb"))))

    (defun configure-hy-inferior-mode()
      "Tell Windows how to run hy"
      (setq hy-mode-inferior-lisp-command "python.exe -i C:/Python27/Scripts/hy"))

    (defun configure-emacs-on-windows()
      "Configures plink path and sets required fonts and then configures tramp"
      (set-plink-path)
      (custom-set-faces
       ;; custom-set-faces was added by Custom.
       ;; If you edit it by hand, you could mess it up, so be careful.
       ;; Your init file should contain only one such instance.
       ;; If there is more than one, they won't work right.
       '(default ((t (:family "Monaco" :foundry "outline" :slant normal :weight normal :height 98 :width normal)))))
      (scroll-bar-mode -1)
      (tool-bar-mode -1)
      (configure-tramp-on-windows)
      (configure-hy-inferior-mode))


    (if (string= system-type "windows-nt")
        (configure-emacs-on-windows))
     #+END_SRC
